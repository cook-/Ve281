Yuan Xiaojie
5093709092

1.
(a)
void LinkedList::removeNode(node *n) {
	if (first == n) {
		first = NULL;
		return;
	}
	node *curr = first;
	while (curr->next != n)
		curr = curr->next;
	curr->next = n->next;
	delete n;
}

(b)
void Dlist::removeNode(node *n) {
	if (n == first) {
		first = n->next;
		n->next->prev = NULL;
	}
	else if (n == last) {
		last = n->prev;
		n->prev->next = NULL;
	}
	else {
		n->prev->next = n->next;
		n->next->prev = n->prev;
	}
	delete n;
}

(c)
void Clist::removeNode(node *n) {
	node *victim = n->next;
	n->value = victim->value;
	n->next = victim->next;
	delete victim;
}

2.
(a)
int removeKey(int a[], unsigned int size, int key) {
	for (int i = 0; i != size; ++i) {
		if (a[i] == key) {
			for (int j = i; j != size-1; ++j) {
				a[j] = a[j+1];
			}
			size--;
		}
	}
	return size;
}

(b)
void LinkedList::removeKey(int key) {
	if (first) return;
	node *curr = first;
	node *victim = NULL;
	while (curr->next) {
		if(curr->next->value == key) {
			victim = curr->next;
			curr->next = victim->next;
			delete victim;
		}
	}
}

3.
class LinkedList {
public:
	...
	const node* const getHead(const LinkedList& l);
private:
	node *first;
}

void recursion(node *first) {
	if (!first) return;
	if (!first->next) recursion(first->next);
	cout << head->value << ' ';
}

ostream& opeartor<<(ostream& os, const LinkedList& l) {
	recursion(getHead(l));
}
