!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
HEADERS	Makefile	/^HEADERS = two-three-tree.h$/;"	m
MAINSRCS	Makefile	/^MAINSRCS = p2.C$/;"	m
MEMCHECKARGS	Makefile	/^MEMCHECKARGS = < database.in$/;"	m
Node	two-three-tree.h	/^struct Node$/;"	s
OBJS	Makefile	/^OBJS = $(SRCS:.C=.o)$/;"	m
OTHSRCS	Makefile	/^OTHSRCS = $/;"	m
Root	two-three-tree.h	/^    Node<Key, Val> *Root() const { return root; }$/;"	f	class:Tree
SRCS	Makefile	/^SRCS = $(MAINSRCS) $(OTHSRCS)$/;"	m
TARGETS	Makefile	/^TARGETS = $(MAINSRCS:.C=)$/;"	m
TEMPLATESRCS	Makefile	/^TEMPLATESRCS = two-three-tree.C$/;"	m
TWO_THREE_TREE_C	two-three-tree.C	2;"	d	file:
TWO_THREE_TREE_H	two-three-tree.h	2;"	d
Tree	two-three-tree.C	/^Tree::Tree() {$/;"	f	class:Tree
Tree	two-three-tree.C	/^Tree::Tree(const Tree &t) {$/;"	f	class:Tree
Tree	two-three-tree.h	/^class Tree$/;"	c
center	two-three-tree.h	/^    Node *center; \/\/ center child$/;"	m	struct:Node
inOrderPrint	two-three-tree.C	/^void Tree::inOrderPrint(ostream &os) const {$/;"	f	class:Tree
insert	two-three-tree.C	/^bool Tree::insert(Key *key, Val *val) {$/;"	f	class:Tree
insert_help	two-three-tree.C	/^static bool insert_help(Node<Key, Val> *&node, Key *key, Val *val,$/;"	f	file:
isEmpty	two-three-tree.h	/^    bool isEmpty() const { return !root; }$/;"	f	class:Tree
left	two-three-tree.h	/^    Node *left;   \/\/ left child$/;"	m	struct:Node
lkey	two-three-tree.h	/^    Key *lkey;    \/\/ left key$/;"	m	struct:Node
lval	two-three-tree.h	/^    Val *lval;    \/\/ left val$/;"	m	struct:Node
main	test-tree.C	/^int main(int argc, char *argv[])$/;"	f
operator =	two-three-tree.C	/^Tree::Tree &operator=(const Tree &t) {$/;"	f
remove	two-three-tree.C	/^Val* Tree::remove(Key key) {$/;"	f	class:Tree
right	two-three-tree.h	/^    Node *right;  \/\/ right child$/;"	m	struct:Node
rkey	two-three-tree.h	/^    Key *rkey;    \/\/ right key$/;"	m	struct:Node
root	two-three-tree.h	/^    Node<Key, Val> *root; \/\/ The root of the 2-3 tree$/;"	m	class:Tree
rval	two-three-tree.h	/^    Val *rval;    \/\/ right val$/;"	m	struct:Node
search	two-three-tree.C	/^Val* Tree::search(Key key) const {$/;"	f	class:Tree
search_help	two-three-tree.C	/^static Val* search_help(Node<Key, Val> *node, Key key) {$/;"	f	file:
search_parent	two-three-tree.C	/^static Node<Key, Val>* search_parent(Node<Key, Val> *node, Node<Key, Val> *root) {$/;"	f	file:
split	two-three-tree.C	/^static split(Node<Key, Val> *&node, Key key, Val val, Node<Key, Val> *root) {$/;"	f	file:
~Tree	two-three-tree.C	/^Tree::~Tree() {$/;"	f	class:Tree
